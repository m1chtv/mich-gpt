const { EmbedBuilder, Message } = require("discord.js");

class MichClient {
  contextData = new Map();
  apiClient = null;
  options = {};
  client = null;

  /**
   * @param {string} openAIAPIKey
   * @param {{contextRemembering:boolean, responseType: 'embed' | 'string', maxLength:number}} options
   * @param {Client} client
   */
  constructor(openAIAPIKey, options, client) {
    if (!openAIAPIKey) {
      throw new TypeError(
        "An OpenAI API key must be provided. Create an OpenAI account and get an API key at https://platform.openai.com/account/api-keys"
      );
    }

    if (!client) {
      throw new TypeError("A Discord.js Client instance must be provided.");
    }

    this.client = client;

    const optionDefaults = {
      contextRemembering: true,
      responseType: "embed",
      maxLength: 4096,
    };

    this.options = { ...optionDefaults, ...options };

    import("chatgpt").then(({ ChatGPTAPI }) => {
      this.apiClient = new ChatGPTAPI({
        apiKey: openAIAPIKey,
      });
    }).catch(error => {
      console.error("Failed to initialize ChatGPTAPI:", error);
    });
  }

  /**
   * @param {string} message
   * @param {string} id
   * @returns {Promise<object>}
   */
  async send(message, id) {
    if (!this.apiClient) {
      throw new TypeError("ChatGPT client failed to initialize");
    }

    try {
      return await this.apiClient.sendMessage(message, {
        parentMessageId: id,
      });
    } catch (err) {
      console.error("Failed to send message:", err);
      throw err;
    }
  }

  /**
   * @param {string} userId
   */
  forgetContext(userId) {
    if (this.options.contextRemembering) {
      this.contextData.delete(userId);
    }
  }

  /**
   * @param {Message} message
   * @param {string} str
   */
  async chatMessage(message, str) {
    const context = this.contextData.get(message.author.id);
    const botAvatarURL = this.client.user.avatarURL();

    const loadingEmbed = new EmbedBuilder()
      .setColor(0x9f1b5f)
      .setTitle("Please Wait While I Process Your Request!")
      .setDescription("**This May Take A Few Minutes**")
      .setAuthor({
        iconURL: botAvatarURL,
        url: "https://bruh.ir",
        name: "Bruh-AI - Loading",
      });

    const responseMessage = await message.reply({ embeds: [loadingEmbed] });

    try {
      const reply = await this.send(str || message.content, context);

      if (this.options.responseType === "string") {
        await message.reply(reply.text);
      } else {
        const responseEmbed = new EmbedBuilder()
          .setColor(0x9f1b5f)
          .setDescription(reply.text)
          .setFooter({ text: 'Thanks for using Bruh-AI!' })
          .setAuthor({
            iconURL: botAvatarURL,
            url: "https://bruh.ir",
            name: "Generated by Bruh-AI",
          });

        await message.reply({ embeds: [responseEmbed] });
      }

      if (this.options.contextRemembering) {
        this.contextData.set(message.author.id, reply.id);
      }
    } catch (err) {
      console.error("Failed to process chat message:", err);
      await message.reply("There was an error processing your request.");
    } finally {
      await responseMessage.delete().catch(() => null);
    }
  }
}

module.exports = {
  MichClient,
};
