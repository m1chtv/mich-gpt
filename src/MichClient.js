const { EmbedBuilder, Message } = require("discord.js");

class MichClient {
  contextData = new Map();
  apiClient = null;
  options = {};

  /**
   * @param {string} openAIAPIKey
   * @param {{contextRemembering:boolean, responseType: 'embed' | 'string', maxLength:number}} options
   */
  constructor(openAIAPIKey, options) {
    if (!openAIAPIKey)
      throw new TypeError(
        "An OpenAI API key must be provided. Create an OpenAI account and get an API key at https://platform.openai.com/account/api-keys"
      );

    const optionDefaults = {
      contextRemembering: true,
      responseType: "embed",
      maxLength: 4096,
    };

    this.options = Object.assign(optionDefaults, options);
    import("chatgpt").then(
      function (lib) {
        const { ChatGPTAPI } = lib;

        this.apiClient = new ChatGPTAPI({
          apiKey: openAIAPIKey,
        });
      }.bind(this)
    );
  }

  /**
   * @param {string} message
   * @param {string} id
   * @returns {object}
   */
  async send(message, id) {
    try {
      if (!this.apiClient)
        throw new TypeError("ChatGPT client failed to initialize");
      const response = await this.apiClient.sendMessage(message, {
        parentMessageId: id,
      });
      return response;
    } catch (err) {
      throw err;
    }
  }

  /**
   * @param {string} userId
   */
  forgetContext(userId) {
    if (this.options.contextRemembering) this.contextData.delete(userId);
  }

  /**
   * @param {Message} message
   * @param {string} str
   */
  async chatMessage(message, str) {
    const context = this.contextData.get(message.author.id);
    const loading = new EmbedBuilder()
      .setColor(0x9f1b5f)
      .setTitle(`Please Wait While I Process Your Request!`)
      .setDescription(`**This May Take A Few Minutes**`)
      .setAuthor({
        iconURL:
          "https://cdn.discordapp.com/attachments/1175429623161569280/1179843873451823174/apple-touch-icon.png",
        url: "https://bruh.ir",
        name: "Bruh-AI - Loading",
      });
    const response = await message.reply({
      cotent: undefined,
      embeds: [loading],
    });

    const reply = await this.send(
      str || message.content,
      this.options.contextRemembering && context ? context : undefined
    );
    await response.delete().catch((_) => null);

    if (this.options.responseType === "string") {
      await message.reply(reply.text);
    } else { 
      const embed = new EmbedBuilder()
        .setColor(0x9f1b5f)
        .setDescription(reply.text)
        .setFooter({ text: 'Thanks for using Bruh-AI!' })
        .setAuthor({
          iconURL:
            "https://cdn.discordapp.com/attachments/1175429623161569280/1179843873451823174/apple-touch-icon.png",
          url: "https://bruh.ir",
          name: "Generated by Bruh-AI",
        });

      await message.reply({
        cotent: undefined,
        embeds: [embed],
      });
    }

    if (this.options.contextRemembering) {
      this.contextData.set(message.author.id, reply.id);
    }
  }
}

module.exports = {
  MichClient,
};
